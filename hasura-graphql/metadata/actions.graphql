type Mutation {
  login(
    arg1: loginInput!
  ): authResponse
}

type Mutation {
  register(
    arg1: RegisterInput!
  ): generalResponse
}

type Mutation {
  resetPasswordByEmail(
    arg1: resetPasswordByEmailInput!
  ): authResponse
}

type Mutation {
  verifyEmailOrForgotPassword(
    arg1: verifyByEmailInput!
  ): generalResponse
}

input loginInput {
  email: String!
  password: String!
}

input registerInput {
  first_name: String!
  last_name: String!
  email: String!
  phone_number: String!
  user_roles: [String!]!
}

input imagesData {
  images: [String]!
}

input updateInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  newPassword: String!
}

input forgotInput {
  email: String!
}

input resetInput {
  password: String!
  token: String!
}

input requestInput {
  email: String!
}

input SampleInput {
  email: String!
  reset_url: String!
}

input messageInput {
  email: String!
  message: String!
  subject: String!
}

input RegisterInput {
  first_name: String!
  last_name: String!
  email: String!
  phone_number: String!
  user_roles: [String]
  gender: String
}

input SampleInpukt {
  email: String!
  reset_url: String!
}

input resetPasswordByEmailInput {
  email: String!
  password: String!
  reset_password_by_email_token: String!
}

input verifyByEmailInput {
  email: String!
  reset_url: String!
}

type authResponse {
  id: String!
  hasura_access_token: String!
  user: User!
}

type imagesUrls {
  urls: [String]!
}

type SampleOutput {
  accessToken: String!
}

type messageResponse {
  message: String!
}

type User {
  id: String!
  first_name: String!
  last_name: String!
  email: String!
  user_roles: [String!]!
  PhotoUrl: String
  phone_number: String
}

type registerMessage {
  message: String
  error: String
}

type generalResponse {
  message: String
  success: Boolean
}

